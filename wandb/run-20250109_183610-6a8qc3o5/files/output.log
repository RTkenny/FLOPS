init model
Training...
Epoch 1 started
train loss:2.326950788497925; train accuracy 1.56%:   0%|â–Œ                                                                                                                       | 1/235 [00:02<08:07,  2.08s/it]
Traceback (most recent call last):
  File "/nvme1/data_rt/LR/flops/train_mlp.py", line 68, in <module>
    trainer.train()
  File "/nvme1/data_rt/LR/flops/trainer_a.py", line 100, in train
    global_step = self.step(epoch, global_step)
  File "/nvme1/data_rt/LR/flops/trainer_a.py", line 221, in step
    output, _ = self.model(data, add_noise=None)
  File "/home/rt/data/miniconda3/envs/LR/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/rt/data/miniconda3/envs/LR/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/rt/data/miniconda3/envs/LR/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1519, in forward
    inputs, kwargs = self._pre_forward(*inputs, **kwargs)
  File "/home/rt/data/miniconda3/envs/LR/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1413, in _pre_forward
    if torch.is_grad_enabled() and self.reducer._rebuild_buckets():
RuntimeError: Expected to have finished reduction in the prior iteration before starting a new one. This error indicates that your module has parameters that were not used in producing loss. You can enable unused parameter detection by passing the keyword argument `find_unused_parameters=True` to `torch.nn.parallel.DistributedDataParallel`, and by
making sure all `forward` function outputs participate in calculating loss.
If you already have done the above, then the distributed data parallel module wasn't able to locate the output tensors in the return value of your module's `forward` function. Please include the loss function and the structure of the return value of `forward` of your module when reporting this issue (e.g. list, dict, iterable).
Parameter indices which did not receive grad for rank 0: 2 5 8 11
 In addition, you can set the environment variable TORCH_DISTRIBUTED_DEBUG to either INFO or DETAIL to print out information about which particular parameters did not receive gradient on this rank as part of this error
